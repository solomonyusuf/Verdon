@page "/private/quiz/result/{QuizId}/{UserId}/{score}"
@inject QuizDbContext _context
@inject NavigationManager router
@inject UserService _user
@attribute [Authorize(Roles = "User,HOC,Admin")]
@inject ApplicationDbContext _db

<div class="col-md-8 mb-3" style="margin-top:50px;" align="center">
    <div class="card">
        <div class="card-body">
            <div class="d-flex flex-column align-items-center text-center">
                <img src="@user.Image" alt="Admin" class="rounded-circle" width="150">
                <div class="mt-3">
                    <h4>@user.FirstName&nbsp;@user.LastName</h4>
                    <hr />
                    <p class="text-secondary mb-1">@exam.Title</p>
                    <hr />
                    <br />
                    <h5>Total : @(score)</h5>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public string QuizId { get; set; }
    [Parameter]
    public string UserId { get; set; }
    [Parameter]
    public string score { get; set; }
   
    public User user = new();
    public PrivateQuiz exam = new();

    protected override async Task OnInitializedAsync()
    {
        user = await _db.User.FindAsync(UserId);
        exam = await _context.PrivateQuiz.FindAsync(Guid.Parse(QuizId));
        await FetchAttempts();
    }
     async Task FetchAttempts()
    {
        try
        {
            var res = await _db.PrivateAttempt.Where(x => x.UserId == user.Id && x.QuizId == exam.QuizId).ToListAsync();
           if(res != null)
           {
                _db.RemoveRange(res);
                _db.SaveChanges();
           }

        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }

    }
    

}
\