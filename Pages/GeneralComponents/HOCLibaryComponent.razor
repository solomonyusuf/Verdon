@page "/libary/hoc"
@inject ApplicationDbContext _db
@inject UploadController _upload
@attribute [Authorize(Roles = "User,HOC,Admin")]
@inject UserService _usr
@inject NavigationManager router

<div class="row" data-aos="zoom-out" style="margin-top:30px;">
    <div class="col-md-4">
        <h4>&nbsp;HOC UPLOAD</h4>
        <div class="card" style="margin:2px;">
            <EditForm Model="@book" OnSubmit="@Post" class="card-body">
                <div class="mb-3">
                    <p>NOTE: <i>file must not excced 30MB, patiently load file.</i></p>
                </div>
                <div class="form-group">
                    <InputFile OnChange="@Upload" type="file" class="form-control form-control-lg" />
                </div>
                <div class="progress">
                    <div class="progress-bar" aria-valuenow="@counter" aria-valuemin="0" aria-valuemax="100" style="width:@(counter/25 * 100)%;">@(counter / 25 * 100)%</div>
                </div>
                <div class="form-group">
                    <div class="mb-3">
                        <label class="form-label"><strong>Select Department:&nbsp;@book.Department</strong></label>
                        <InputSelect class="form-control" @bind-Value="@book.Department">
                            <option selected>NULL</option>
                            @foreach (var item in departments)
                            {
                                <option value="@item.Name">@item.Name</option>
                            }
                        </InputSelect>
                    </div>
                    <div class="mb-3 col-md-6" align="center">
                        <label>Level</label>
                        <InputSelect class="form-control" @bind-Value="@data">
                            <option value="NULL" @onclick="Filter" selected>NULL</option>
                            @foreach (var item in new List<string> { "100", "200", "300", "400", "500", "600" })
                            {
                                <option value="@item">@item</option>
                            }
                        </InputSelect>

                    </div>
                </div>
                <div class="form-group" align="center">
                    <button class="btn btn-info btn-lg w-50" type="submit">SUBMIT</button>
                </div>
            </EditForm>
        </div>
    </div>
    
    <div class="col-md-8">
        <h4>&nbsp;HOC LIBARY</h4>
        <div class="card" style="margin:2px;">
            <EditForm Model="book" class="card-body">
                 <div class="input-group">
                     <InputText @bind-Value="@value" class="bg-light form-control border-0 small" type="text" placeholder="Search for Book Name..."/>
                    <button class="btn btn-info py-0" type="button" @onclick="GetAll">
                         <i class="fas fa-search"></i></button>
                    <button style="margin-left:2px;" @onclick="Filter" class="btn btn-warning py-0" type="button">
                        <i class="fas fa-recycle"></i>
                    </button>
                </div><br />
              <div class="row">
                    <div class="mb-3 col-md-6" align="center">
                        <label>Department</label>
                    <InputSelect class="form-control" @bind-Value="@filter">
                            <option value="NULL" @onclick="Filter" selected>All</option>
                        @foreach (var item in departments)
                        {
                                <option value="@item.Name">@item.Name</option>
                        }
                    </InputSelect>
                   
                </div>
                <div class="mb-3 col-md-6" align="center">
                        <label>Level</label>
                    <InputSelect class="form-control" @bind-Value="@level">
                            <option value="NULL" selected>NULL</option>
                        @foreach (var item in new List<string>{"100","200","300","400","500","600"})
                        {
                            <option value="@item">@item</option>
                        }
                    </InputSelect>

                </div>
                </div>
                <strong align="center" class="col-md-6">@books.Count() books</strong>
            </EditForm>
         </div>
         <div class="card" style="margin:2px;">
            <div class="card-body">
               @if(books.Count() == 0)
               {
                   <p>No data available</p>
               }
               @foreach (var item in books)
               {
                    <div class="card" style="margin:2px;">
                        <div class="card-body">
                            <h5><a target="_blank" href="@item.File">@item.Name</a></h5>
                            @if (int.Parse(item.Image) >= 1024)
                            {
                                <small>@(int.Parse(item.Image) / 1024) MB</small>
                            }
                            @if (int.Parse(item.Image) < 1024)
                            {
                                <small>@item.Image KB </small>
                            }

                            <button style="margin:8px;" class="btn btn-danger" @onclick="@(()=> Remove(item))">Delete</button>
                        </div>
                    </div>
                }

                
           </div>
         </div>
    </div>
    
      
</div>

@code {
    public Book book = new();
    public List<Book> books = new();
    public List<Department> departments = new();
    System.Timers.Timer aTimer = new System.Timers.Timer(1000);
    public int counter = 0;
    public int total;
    public string value;
    public string level;
    public string filter;
    public string data;


    protected override async Task OnInitializedAsync()
    {
        var e = await _usr.CurrentUser();
        if (e.MatricNo == null || e.Department == null || e.FirstName == null || e.LastName == null || e.Image == null)
            router.NavigateTo($"/proceed/{e.Id}");
        if (e.Department != null)
            await GetAll();
        departments = await _db.Department.ToListAsync();
    }

    async Task Filter()
    {
        books  = await _db.Book.ToListAsync();
        value = null;
        level = null;
        filter = null;
    }

    async Task<List<Book>> GetAll()
    {
        books = await _db.Book.ToListAsync();
        book = new Book();

        if (filter != null && value != null && level != null)
        {
            books = await _db.Book.Where(x => x.Name.ToLower().Contains(filter.ToLower()) && x.Department.ToLower().Contains(value.ToLowerInvariant()) && 
            x.Level.ToString().Contains(level.ToLowerInvariant())).ToListAsync();
        }
        if(value != null)
        {
            books = await _db.Book.Where(x => x.Name.ToLower().Contains(value.ToLower())).ToListAsync();
        }
        if (filter != null)
        {
            books = await _db.Book.Where(x => x.Department.ToLower().Contains(filter.ToLower())).ToListAsync();
        }
        if (level != null)
        {
            books = await _db.Book.Where(x => x.Level == int.Parse(level)).ToListAsync();
        }


        return books;
    }


    public async Task Remove(Book s)
    {
        try
        {
            File.Delete(s.File);
            _db.Book.Remove(s);
            await _db.SaveChangesAsync();
            await GetAll();

        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }

    }

    public async Task Upload(InputFileChangeEventArgs args)
    {
        try
        {
            StartTimer();
            var file = args.File;
            book.Name = file.Name;
            book.Image = (file.Size / (1024)).ToString();
            book.File = $"wwwroot\\StaticFiles\\{file.Name}";
            await _upload.Upload(file);
        }
        catch(Exception e)
        {
            Console.WriteLine(e);
        }
    }

    public async Task Post()
    {
        try
        {
            book.Level = int.Parse(data);
            await _db.Book.AddAsync(book);
            await _db.SaveChangesAsync();
            data = null;
            value = null;
            filter = null;
            counter = 0;
            books = await GetAll();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
    }

    void StartTimer()
    {

        aTimer.Elapsed += CountDownTimer;
        aTimer.Enabled = true;
    }
    async void CountDownTimer(Object source, ElapsedEventArgs e)
    {
        if (counter < 25)
        {
            counter += 1;
        }
        else
        {
            aTimer.Enabled = false;
        }
        await InvokeAsync(StateHasChanged);
    }
}
