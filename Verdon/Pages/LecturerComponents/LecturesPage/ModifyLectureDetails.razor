@page "/modify/lecture/{Id}"
@layout _LecturerLayout
@inject ApplicationDbContext _db
@inject UploadController _upload
@attribute [Authorize(Roles = "Lecturer")]

<div class="row" data-aos="zoom-out" style="margin:4px;">
    <div class="col-md-8">
            <div class="card shadow">
            <div class="card-body">
                <div class="card" style="background-image:url('assets/img/portfolio/product-1.jpg');height:150px;">
                    <div class="card-body">
                        <h3>@lect.CourseCode : @lect.LectureName</h3>
                    </div>
                </div>
                <div>
                    <ul class="nav nav-tabs" role="tablist">
                        <li class="nav-item" role="presentation"><a class="nav-link active" role="tab" data-bs-toggle="tab" href="#tab-1">Lessons</a></li>
                        <li class="nav-item" role="presentation"><a class="nav-link" role="tab" data-bs-toggle="tab" href="#tab-2">Resources</a></li>
                        <li class="nav-item" role="presentation"><a class="nav-link" role="tab" data-bs-toggle="tab" href="#tab-3">Assignment</a></li>
                        <li class="nav-item" role="presentation"><a class="nav-link" role="tab" data-bs-toggle="tab" href="#tab-4">Attendance</a></li>
                    </ul>
                    <div class="tab-content">
                        <div class="tab-pane active" role="tabpanel" id="tab-1">
                            @if (Lessons.Count() == 0)
                            {
                                <p>No data available.</p>
                            }
                            @foreach (var item in Lessons)
                            {
                                <div class="card" style="margin:2px;">
                                    <div class="card-body">
                                        <h5><a target="_blank" href="@item.Video"><i class="fa fa-play" style="scale:1.7;margin:3px;"></i> @item.LessonName</a></h5>
                                        <small>@item.Size KB | @(int.Parse(item.Size) / 1024) MB</small>
                                        <div class="mb-3" align="center">
                                            <button @onclick="@(()=>  RemoveLesson(item))" class="btn btn-danger btn-lg w-50" type="submit">Delete Lesson</button>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                        <div class="tab-pane" role="tabpanel" id="tab-2">
                            @if (Resources.Count() == 0)
                            {
                                <p>No data available.</p>
                            }
                            @foreach (var item in Resources)
                            {
                                <div class="card" style="margin:2px;">
                                    <div class="card-body">
                                        <h5><a target="_blank" href="@item.File"><i class="fa fa-file" style="scale:1.7;margin:3px;"></i> @item.ResourceName</a></h5>
                                        <small>@item.Size KB | @(int.Parse(item.Size) / 1024) MB</small>
                                        <div class="mb-3" align="center">
                                            <button @onclick="@(()=>  RemoveResource(item))" class="btn btn-danger btn-lg w-50" type="submit">Delete Resource</button>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                        <div class="tab-pane" role="tabpanel" id="tab-3">
                            @if (Assignments.Count() == 0)
                            {
                                <p>No data available.</p>
                            }
                            @foreach (var item in Assignments)
                            {
                                <div class="card" style="margin:2px;">
                                    <div class="card-body">
                                        <h5><a target="_blank" href="@item.File"><i class="fa fa-file" style="scale:1.7;margin:3px;"></i> @item.Title</a></h5>
                                        <small>@item.Size KB | @(int.Parse(item.Size) / 1024) MB</small>
                                        <div class="mb-3" align="center">
                                            <button @onclick="@(()=> RemoveAssignment(item))" class="btn btn-danger btn-lg w-50" type="submit">Delete Asssignment</button>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                        <div class="tab-pane" role="tabpanel" id="tab-4">
                            @if (Attendances.Count() == 0)
                            {
                                <p>No data available.</p>
                            }
                            @foreach (var item in Attendances)
                            {
                                <div class="card" style="margin:2px;">
                                    <div class="card-body">
                                        <div class="card-header py-3">
                                            <p class="text-primary m-0 fw-bold">Students Info - @Attendances.Count() </p>
                                        </div>
                                        <div class="table-responsive table mt-2" id="dataTable" role="grid" aria-describedby="dataTable_info">
                                            <table class="table my-0" id="dataTable">
                                                <thead>
                                                    <tr>
                                                        <th>No</th>
                                                        <th>Matric No</th>
                                                        <th>First Name</th>
                                                        <th>Last Name</th>
                                                        <th>Department</th>
                                                        <th>Date</th>

                                                    </tr>
                                                </thead>
                                                <tbody>
                                                    <tr>

                                                        <td>@(Key++)</td>
                                                        <td>@item.MatricNo</td>
                                                        <td>@item.FirstName</td>
                                                        <td>@item.LastName</td>
                                                        <td>@item.Department</td>
                                                        <td>@item.DateTime</td>
                                                    </tr>

                                                </tbody>
                                                <tfoot>
                                                    <tr>
                                                        <th>No</th>
                                                        <th>Matric No</th>
                                                        <th>First Name</th>
                                                        <th>Last Name</th>
                                                        <th>Department</th>
                                                        <th>Date</th>
                                                    </tr>
                                                </tfoot>
                                            </table>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="col-md-4">
        <div class="card" style="margin:2px;">
            <EditForm Model="@Lesson" OnSubmit="@PostLesson" class="card-body">
                <div class="mb-3">
                    <h3>Add Lesson</h3>
                </div>
                <div class="mb-3">
                    <p>NOTE: <i>file must not excced 30MB, patiently load file.</i></p>
                    </div>
                <div class="form-group">
                    <InputFile OnChange="@UploadLesson" type="file" class="form-control form-control-lg"  />
                </div>
                @if (bind == "lesson")
                {
                    <div class="progress">
                        <div class="progress-bar" aria-valuenow="@counter" aria-valuemin="0" aria-valuemax="100" style="width:@(counter/25 * 100)%;">@(counter / 25 * 100)%</div>
                    </div><br />
                }
                <div class="form-group">
                    <InputText @bind-Value="@Lesson.LessonName" placeholder="ENTER LESSON NAME" type="text" class="form-control form-control-lg" />
                </div>
                <div class="form-group" align="center">
                    <button class="btn btn-info btn-lg w-50" type="submit">SUBMIT</button>
                </div>
            </EditForm>
        </div>
        <div class="card" style="margin:2px;">
            <EditForm Model="@Resource" OnSubmit="@PostResource" class="card-body">
                <div class="mb-3">
                    <h3>Add Resource</h3>
                </div>
                <div class="mb-3">
                    <p>NOTE: <i>file must not excced 30MB, patiently load file.</i></p>
                </div>
                <div class="form-group">
                    <InputFile OnChange="@UploadResource" type="file" class="form-control form-control-lg" />
                </div>
                @if(bind == "resource")
                {
                    <div class="progress">
                        <div class="progress-bar" aria-valuenow="@counter" aria-valuemin="0" aria-valuemax="100" style="width:@(counter/25 * 100)%;">@(counter / 25 * 100)%</div>
                    </div>

                    <br />
                }
                <div class="form-group" align="center">
                    <button class="btn btn-info btn-lg w-50" type="submit">SUBMIT</button>
                </div>
            </EditForm>
        </div>
        <div class="card" style="margin:2px;">
            <EditForm Model="@Assignment" OnSubmit="@PostAssignment" class="card-body">
                <div class="mb-3">
                    <h3>Add Assignment</h3>
                </div>
                <div class="mb-3">
                    <p>NOTE: <i>file must not excced 30MB, patiently load file.</i></p>
                </div>
                <div class="form-group">
                    <InputFile OnChange="@UploadAssignment" type="file" class="form-control form-control-lg" />
                </div>
                @if (bind == "assignment")
                {
                    <div class="progress">
                        <div class="progress-bar" aria-valuenow="@counter" aria-valuemin="0" aria-valuemax="100" style="width:@(counter/25 * 100)%;">@(counter / 25 * 100)%</div>
                    </div>

                    <br />
                }
                <div class="form-group" align="center">
                    <button class="btn btn-info btn-lg w-50" type="submit">SUBMIT</button>
                </div>
            </EditForm>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public string Id { get; set; }
    public Lecture lect = new();
    public List<Lesson> Lessons = new();
    public List<Resource> Resources = new();
    public List<Assignment> Assignments = new();
    public List<Attendance> Attendances = new();
    public Lesson Lesson = new();
    public Resource Resource = new();
    public Assignment Assignment = new();
    public Attendance Attendance = new();
    System.Timers.Timer aTimer = new System.Timers.Timer(1000);
    public int Key = 1;
    public int counter = 0;
    public string bind;

    protected override async Task OnInitializedAsync()
    {
        await GetAll();
    }

    async Task GetAll()
    {
        try
        {
            lect = await _db.Lecture.FindAsync(Guid.Parse(Id));
            Lessons = await _db.Lesson.Where(x => x.LectureId == Guid.Parse(Id)).ToListAsync();
            Resources = await _db.Resource.Where(x => x.LectureId == Guid.Parse(Id)).ToListAsync();
            Assignments = await _db.Assignment.Where(x => x.LectureId == Guid.Parse(Id)).ToListAsync();
            Attendances = await _db.Attendance.Where(x => x.LectureId == Guid.Parse(Id)).ToListAsync();
            Lesson = new Lesson();
            Resource = new Resource();
            Assignment = new Assignment();
            Key = 1;
            counter = 0;
            bind = null;
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
    }

    async Task PostLesson()
    {
        try
        {
            Lesson.LectureId = Guid.Parse(Id);
            await _db.Lesson.AddAsync(Lesson);
            await _db.SaveChangesAsync();
            await GetAll();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
    }


    async Task PostResource()
    {
        try
        {
            Resource.LectureId = Guid.Parse(Id);
            await _db.Resource.AddAsync(Resource);
            await _db.SaveChangesAsync();
            await GetAll();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
    }


    async Task PostAssignment()
    {
        try
        {
            Assignment.LectureId = Guid.Parse(Id);
            await _db.Assignment.AddAsync(Assignment);
            await _db.SaveChangesAsync();
            await GetAll();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
    }

    async Task RemoveLesson(Lesson l)
    {
        try
        {
            File.Delete(l.Video);
            _db.Lesson.Remove(l);
            await _db.SaveChangesAsync();
            await GetAll();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
    }


    async Task RemoveResource(Resource r)
    {
        try
        {
            File.Delete(r.File);
            _db.Resource.Remove(r);
            await _db.SaveChangesAsync();
            await GetAll();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
    }


    async Task RemoveAssignment(Assignment a)
    {
        try
        {
            File.Delete(a.File);
            _db.Assignment.Remove(a);
            await _db.SaveChangesAsync();
            await GetAll();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
    }

    public async Task UploadLesson(InputFileChangeEventArgs args)
    {
        try
        {
            bind = "lesson";
            StartTimer();
            var file = args.File;
            Lesson.LessonName = file.Name;
            Lesson.Size = (file.Size / (1024)).ToString();
            Lesson.Video = $"wwwroot\\StaticFiles\\{file.Name}";
            await _upload.Upload(file);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
    }

    public async Task UploadResource(InputFileChangeEventArgs args)
    {
        try
        {
            bind = "resource";
            StartTimer();
            var file = args.File;
            Resource.ResourceName = file.Name;
            Resource.Size = (file.Size / (1024)).ToString();
            Resource.File = $"wwwroot\\StaticFiles\\{file.Name}";
            await _upload.Upload(file);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
    }

    public async Task UploadAssignment(InputFileChangeEventArgs args)
    {
        try
        {
            bind = "assignment";
            StartTimer();
            var file = args.File;
            Assignment.Title = file.Name;
            Assignment.Size = (file.Size / (1024)).ToString();
            Assignment.File = $"wwwroot\\StaticFiles\\{file.Name}";
            await _upload.Upload(file);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
    }

    void StartTimer()
    {

        aTimer.Elapsed += CountDownTimer;
        aTimer.Enabled = true;
    }
    async void CountDownTimer(Object source, ElapsedEventArgs e)
    {
        if (counter < 25)
        {
            counter += 1;
        }
        else
        {
            aTimer.Enabled = false;
        }
        await InvokeAsync(StateHasChanged);
    }
}